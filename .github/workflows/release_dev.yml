name: Release Dev Docker image to Linode

on:
  push:
    branches-ignore:
      - 'master'
env:
  IMAGE_NAME_SERVER: ${{ secrets.DOCKER_USERNAME }}/derecksnotes-server
  IMAGE_NAME_CLIENT: ${{ secrets.DOCKER_USERNAME }}/derecksnotes-client
  CONTAINER_NAME_SERVER: dev_linode_derecksnotes-server
  CONTAINER_NAME_CLIENT: dev_linode_derecksnotes-client
  WORK_DIR: /root/dev_docker-compose-derecksnotes/

jobs:
  push_to_registry_server:
    name: Push Docker server image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create .env file
        run: |
          echo BUILD_ENV=DEV > ./server/.env
          echo API_URL=https://dev.derecksnotes.com/api/ >> ./server/.env
          echo SESSION_SECRET=${{ secrets.SESSION_SECRET }} >> ./server/.env
          echo MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} >> ./server/.env
          echo MONGO_DATABASE=dev_derecksnotes >> ./server/.env
          echo SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY_DEV }} >> ./server/.env

      - name: Build and push server image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: ./
          file: ./server/Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME_SERVER }}:latest_dev

  push_to_registry_client:
    name: Push Docker client image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create .env file
        run: |
          echo NEXT_PUBLIC_BUILD_ENV=DEV > ./client/.env
          echo NEXT_PUBLIC_APP_URL=https://dev.derecksnotes.com/ >> ./client/.env
          echo NEXT_PUBLIC_API_URL=https://dev.derecksnotes.com/api/ >> ./client/.env

      - name: Build and push client image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: ./
          file: ./client/Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME_CLIENT }}:latest_dev

  deploy_to_linode:
    name: Deploy docker-compose.yml to Linode
    needs: [push_to_registry_server, push_to_registry_client]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Create .env file for docker-compose deployment
        run: |
          echo IMAGE_NAME_SERVER=${{ env.IMAGE_NAME_SERVER }}:latest_dev > .env
          echo IMAGE_NAME_CLIENT=${{ env.IMAGE_NAME_CLIENT }}:latest_dev >> .env
          echo CONTAINER_NAME_SERVER=${{ env.CONTAINER_NAME_SERVER }} >> .env
          echo CONTAINER_NAME_CLIENT=${{ env.CONTAINER_NAME_CLIENT }} >> .env
          echo PORT_MAP_SERVER=3001 >> .env
          echo PORT_MAP_CLIENT=3000 >> .env

      - name: Copy docker-compose.yml to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USERNAME }}
          password: ${{ secrets.REMOTE_PASSWORD }}
          port: ${{ secrets.REMOTE_PORT }}
          source: './docker-compose.yml, .env'
          target: ${{ env.WORK_DIR }}

      - name: Deploy to remote server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USERNAME }}
          password: ${{ secrets.REMOTE_PASSWORD }}
          port: ${{ secrets.REMOTE_PORT }}
          command_timeout: 20m
          script: |
            cd ${{ env.WORK_DIR }}
            docker pull ${{ env.IMAGE_NAME_SERVER }}:latest_dev
            docker pull ${{ env.IMAGE_NAME_CLIENT }}:latest_dev
            docker container prune -f
            docker system prune -af
            docker rm -f ${{ env.CONTAINER_NAME_SERVER }} || true
            docker rm -f ${{ env.CONTAINER_NAME_CLIENT }} || true
            docker compose --env-file .env --project-name derecksnotes-dev down
            docker compose --env-file .env --project-name derecksnotes-dev up -d
