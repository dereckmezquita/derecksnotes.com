<title>TypeScript: some notes</title>
<h1>TypeScript: some notes</h1>
<p>
    Simple notes on TypeScript (TS). So far these are just the basics, seems that it's going to be too hard to learn; it's just JavaScript, but with types right?
</p>
<h2>Install TS and types</h2>
<p>
    Run this to install the types: <code>npm i --save-dev @types/node</code>.
</p>

<h2>Types in TS</h2>
<p>
    Here is a quick rundown on some of the types found in TS:
</p>
<table>
    <thead>
        <tr>
            <th>Type name</th>
            <th>Example</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>number</td>
            <td>1, 3.32, -13</td>
            <td>This is includes any kind of numbers, and does not differentiate between floats or integers.</td>
        </tr>
        <tr>
            <td>string</td>
            <td>"Hello", 'Hello', `Hello`</td>
            <td>Any text values, there are three kinds of syntaxes for these, single/double quotes and back-ticks.-</td>
        </tr>
        <tr>
            <td>boolean</td>
            <td>true, false</td>
            <td>True and false, simple.</td>
        </tr>
        <tr>
            <td>object</td>
            <td>{organism: human}</td>
            <td>Any JS object, these are basically the same. However, TS does allow for more specific types.</td>
        </tr>
        <tr>
            <td>array</td>
            <td>["one", "two", "three"]</td>
            <td>Any JS array works here, arrays can be strict or flexible in types of elements inside.</td>
        </tr>
        <tr>
            <td>tuple</td>
            <td>[1, 2]</td>
            <td>TS specific, allows for creation of fixed length arrays.</td>
        </tr>
        <tr>
            <td>enum</td>
            <td>enum {NEW, OLD}</td>
            <td>TS specific, automatically generate a set of named constants; a collection of values. Three kinds:
                numeric,
                string, and heterogenous.</td>
        </tr>
        <tr>
            <td>any</td>
            <td>*</td>
            <td>Any kind of value and has no type, using this will allow this piece of code to be interpreted
                "classically"
                by JS.</td>
        </tr>
    </tbody>
</table>


<ol class="foot-notes">
    <div class="foot-notes-head">
        Footnotes:
    </div>
</ol>