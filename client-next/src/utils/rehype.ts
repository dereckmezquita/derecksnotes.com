import { Node } from 'unist';

interface DropCapConfig {
    float?: string;
    fontSize?: string;
    fontFamily?: string;
    lineHeight?: string;
    marginRight?: string;
    color?: string;
}

export function rehypeDropCap(config?: DropCapConfig) {
    return (tree: Node) => {
        // Step 1: Initialize firstParagraphNode
        let firstParagraphNode: Node | null = null;

        // Step 2: Define findFirstParagraphNode function
        const findFirstParagraphNode = (node: Node) => {
            if (firstParagraphNode) return;

            // Check if the current node is a paragraph element and contains text
            if (node.type === 'element' && (node as any).tagName === 'p' && (node as any).children.some((child: any) => child.type === 'text' && child.value.trim() !== '')) {
                firstParagraphNode = node;
                return;
            }
            if ('children' in node) {
                (node.children as Node[]).forEach(findFirstParagraphNode);
            }
        };

        // Step 3: Call findFirstParagraphNode function
        findFirstParagraphNode(tree);

        // Step 4: Check if firstParagraphNode is found
        if (firstParagraphNode) {
            const firstChild = (firstParagraphNode as any).children[0];
            if (firstChild && firstChild.type === 'text') {
                const value = firstChild.value.trim();

                // Step 5: Create dropCapSpan
                const dropCapSpan = {
                    type: 'element',
                    tagName: 'span',
                    properties: {
                        style: `
                            float: ${config?.float ?? 'left'};
                            font-size: ${config?.fontSize ?? '4.75em'};
                            font-family: ${config?.fontFamily ?? 'Georgia, serif'};
                            line-height: ${config?.lineHeight ?? '40px'};
                            margin-right: ${config?.marginRight ?? '0.1em'};
                            color: ${config?.color ?? 'inherit'};
                        `,
                        className: ['dropcap'],
                    },
                    children: [{
                        type: 'text',
                        value: value[0]
                    }]
                };

                // Step 6: Modify firstParagraphNode
                firstChild.value = value.slice(1);
                (firstParagraphNode as any).children.unshift(dropCapSpan);
            }
        }
    };
}
// a simple functions simply to reliably add css styles to the table of contents generated by remark-toc
// we want to style the first ul element with a class of "table-of-contents"
// <h2 id="table-of-contents">Table of contents</h2>
// <ul>
//     <li>
//         <p><a href="#test1">test1</a></p>
//     </li>
//     <li>
//         <p><a href="#test">test</a></p>
//     <ul>
//         <li>
//             <p><a href="#another-level">another level</a></p>
//             <ul>
//                 <li><a href="#one-more">one more</a></li>
//             </ul>
//         </li>
//     </ul>
//     </li>
// </ul>

export function rehypeStyleToc() {
    return (tree: Node) => {
        // Step 1: Initialize tableOfContentsNode
        let tableOfContentsNode: Node | null = null;

        let tableOfContentsHeaderFound = false;

        // Step 2: Define findTableOfContentsNode function
        const findTableOfContentsNode = (node: Node) => {
            if (tableOfContentsNode) return;

            // Check if the current node is an h2 element with id="table-of-contents"
            if (node.type === 'element' && (node as any).tagName === 'h2') {
                tableOfContentsHeaderFound = true;
            } else if (tableOfContentsHeaderFound && node.type === 'element' && (node as any).tagName === 'ul') {
                tableOfContentsNode = node;
                return;
            }

            if ('children' in node) {
                (node.children as Node[]).forEach(findTableOfContentsNode);
            }
        };

        // Step 3: Call findTableOfContentsNode function
        findTableOfContentsNode(tree);


        // Step 4: Style tableOfContentsNode
        if (tableOfContentsNode) {
            // recursively go through children and add styles
            const addStyles = (node: Node) => {
                if (node.type === 'element' && (node as any).tagName === 'ul') {
                    (node as any).properties = {
                        style: `
                            line-height: 5px;
                            margin-left: 0.75rem;
                            padding-left: 0.75rem;
                        `
                    };
                }

                if ('children' in node) {
                    (node.children as Node[]).forEach(addStyles);
                }
            }

            addStyles(tableOfContentsNode);
        }
    };
}

// add links to headings using the id generated by rehype-slug
// <h2 id="some-id">Some id</h2>
// we want the result to be as
// <h1 id="some-id">
//     <a aria-hidden="true" tabindex="-1" href="#some-id"><span># </span>Lorem ipsum</a>
// </h1>
export function rehypeAddHeadingLinks() {
    return (tree: Node) => {

        // Step 1: Define addHeadingLinks function
        const addHeadingLinks = (node: Node) => {
            
            // Check if the current node is a heading element
            if (node.type === 'element' && ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes((node as any).tagName)) {
                const id = (node as any).properties.id;
                
                // Create link element
                const link = {
                    type: 'element',
                    tagName: 'a',
                    properties: {
                        ariaHidden: 'true',
                        tabIndex: '-1',
                        href: `#${id}`,
                        style: `
                            text-decoration: none;
                            font-size: 0.9em;
                        `,
                        className: ['icon', 'icon-link'],
                    },
                    children: [{
                        type: 'element',
                        tagName: 'img',
                        properties: {
                            src: '/site-images/icons/link-icon.png', // base64 encoded green pushpin image
                            alt: `Link to heading ${id}`,
                            style: `
                                height: 0.8em;
                                padding-left: 0.2em;
                            `,
                        },
                    }],
                };

                // Append link to the heading
                (node as any).children.push(link);
            }

            if ('children' in node) {
                (node.children as Node[]).forEach(addHeadingLinks);
            }
        };

        // Step 2: Call addHeadingLinks function
        addHeadingLinks(tree);
    };
}
